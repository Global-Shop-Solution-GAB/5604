Program.Sub.ScreenSU.Start
Gui.Form..Create
Gui.Form..Caption("Daily Inventory History Refining")
Gui.Form..Size(6840,2250)
Gui.Form..MinX(0)
Gui.Form..MinY(0)
Gui.Form..Position(0,0)
Gui.Form..BackColor(-2147483633)
Gui.Form..MousePointer(0)
Gui.Form..Event(UnLoad,Form_UnLoad)
Gui.Form..ControlBox(False)
Gui.Form.proBar1.Create(ProgressBar)
Gui.Form.proBar1.Size(5940,150)
Gui.Form.proBar1.Position(255,660)
Gui.Form.proBar2.Create(ProgressBar)
Gui.Form.proBar2.Size(5940,150)
Gui.Form.proBar2.Position(255,1020)
Gui.Form.lblDate.Create(Label,"Label",True,1935,255,0,255,405,True,0,"Arial",8,-2147483633,0)
Gui.Form.lblStart.Create(Label,"Label",True,1935,255,0,255,1320,True,0,"Arial",8,-2147483633,0)
Gui.Form.lblEnd.Create(Label,"Label",True,1935,255,0,4245,1320,True,1,"Arial",8,-2147483633,0)
Gui.Form.lblSame.Create(Label,"Label",True,3330,255,0,2850,405,True,1,"Arial",8,-2147483633,0)
Program.Sub.ScreenSU.End

Program.Sub.Preflight.Start
v.Global.sTransactionLog.Declare
f.Intrinsic.Control.CallSub("Check_And_Create_Custom_Folder")
f.Intrinsic.String.Build("{0}\Custom\5604\{1}\Transaction Log\Daily_{2}_{3}_{4}.txt",v.Caller.GlobalDir,v.Caller.CompanyCode,v.Caller.User,v.Ambient.Date.FormatYYYYMMDD,v.Ambient.Now.FormatHHNNSS,v.Global.sTransactionLog)
Program.External.Include.Library("GCG_5604_Tables.lib",False)
Program.Sub.Preflight.End

Program.Sub.Main.Start
F.Intrinsic.Control.Try
	V.Local.sError.Declare
	v.Local.sRet.Declare
	v.Local.sInitDate.Declare
	v.Local.sLastDateRefine.Declare
	v.Local.dYesterday.Declare
	v.Local.sSQL.Declare
	v.Local.sYesterday.Declare
	v.Local.iCnt.Declare
	v.Local.sPart.Declare
	v.Local.sLocation.Declare
	v.Local.iNextDate.Declare
	v.Local.sStartTime.Declare
	v.Local.sEndTime.Declare
	v.Local.sMsg.Declare
	v.Local.iDayDiffs.Declare
	v.Local.dLastDateRefine.Declare
	v.Local.shold.Declare
	v.Local.iDay.Declare
	v.Local.sDateActionSQL.Declare
	v.Local.sDateHistorySQL.Declare
	v.Local.dDateProcess.Declare
	v.Local.sDateProcess.Declare
	v.Local.iInner.Declare
	v.Local.iYear.Declare
	v.Local.sDate_History.Declare
	v.Local.iYearHistory.Declare
	v.Local.iDate_Hist.Declare
	
	v.local.fOld_Onhand.Declare 
	v.local.fOld_Inv_Cost.Declare 
	v.local.fOld_Matl.Declare 
	v.local.fOld_Labr.Declare 
	v.local.fOld_Ovhd.Declare 
	v.local.fOld_Outs.Declare 
	v.local.fOld_Frgt.Declare 
	v.Local.fOld_Oth.Declare 
	v.Local.iBeg_Date_Action.Declare
	v.Local.sBeg_Hist_Time.Declare
	
	v.Local.sStartTime.Set(v.Ambient.Now)
	gui.Form.lblDate.Caption("")
	gui.Form.lblSame.Caption("")
	gui.Form.lblStart.Caption("")
	gui.Form.lblEnd.Caption("")
	
	F.ODBC.Connection!conx.OpenCompanyConnection(3600)
	
	f.Intrinsic.Control.CallSub("Check_Tables")	

	'Check if the custom table in database has been initialized
	'not sure octsrs bug that this function does not work
	'F.Global.Registry.ReadValue("SUPERVSR",V.Caller.CompanyCode,"OCTSRS.NET.EXE",5604,3000,5,"",V.Local.sRet)
	f.Intrinsic.String.Build("select Top 1 RTRIM(SVAL),IVal from gs_registry where reg_id = 5604 and program = 'OCTSRS.NET.EXE' AND Company = '{0}'",v.Caller.CompanyCode,v.Local.sSQL)
	F.ODBC.Connection!CCommon.OpenCommonConnection
	f.ODBC.Connection!CCommon.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
	f.ODBC.Connection!CCommon.Close
	f.Intrinsic.Control.If(v.Ambient.ExecuteAndReturnEOF)
		f.Intrinsic.File.String2File(v.Global.sTransactionLog,"Custom table has not been initialized. Please run Initialize Custom Inventory History under Supervsr from GSSMenu")
		f.Intrinsic.Control.CallSub(Unload)	
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.String.Split(v.Local.sRet,"*!*",v.Local.shold)
	v.Local.sRet.Set(v.Local.shold(0))
	F.Intrinsic.Control.If(V.Local.sRet.UCase,=,"INITIALIZE DATE")
		'F.Global.Registry.ReadValue("SUPERVSR",V.Caller.CompanyCode,"OCTSRS.NET.EXE",5604,3000,1,"",V.Local.sInitDate)		
		v.Local.sInitDate.Set(v.Local.shold(1))		
	f.Intrinsic.Control.EndIf
	
	'If No Initialize Date found that means the project has not been initialized
	f.Intrinsic.Control.If(v.Local.sInitDate.Trim,=,"")
		f.Intrinsic.File.String2File(v.Global.sTransactionLog,"Custom table has not been initialized. Please run Initialize Custom Inventory History under Supervsr from GSSMenu")
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	'Get Last Date Refine, if not found will be blank
	F.ODBC.Connection!CommonConx.OpenConnection(V.Ambient.Ccon,V.Ambient.Cuser,V.Ambient.Cpass)
	f.Intrinsic.String.Build("select Top 1 IVal from GS_REGISTRY where reg_id = '5604' and UCase(SVal) = 'LAST DATE REFINE' AND Company = '{0}'",v.Caller.CompanyCode,v.Local.sSQL)
	f.ODBC.Connection!CommonConx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
	v.Local.sLastDateRefine.Set(v.Local.sRet.Trim)
	F.ODBC.Connection!CommonConx.Close
	
	'If LastDateRefine is blank, it will be assigned to Initialize Date
	f.Intrinsic.Control.If(v.Local.sLastDateRefine,=,"")
		v.Local.sLastDateRefine.Set(v.Local.sInitDate)
	f.Intrinsic.Control.EndIf
	
	'Get Yesterday Date
	f.Intrinsic.Date.DateAdd("D",-1,v.Ambient.Date,v.Local.dYesterday)	
	
	'Will stop if Last Date Refine = Yesterday
	f.Intrinsic.Control.If(v.Local.sLastDateRefine,>=,v.Local.dYesterday.FormatYYYYMMDD)
		f.Intrinsic.File.String2File(v.Global.sTransactionLog,"Last Date Refine >= Yesterday")
		f.Intrinsic.Control.ExitSub
	f.Intrinsic.Control.EndIf
	
	v.Local.sYesterday.Set(v.Local.dYesterday.FormatYYYYMMDD)
	'f.Intrinsic.UI.InvokeWaitDialog("Processing Inventory Daily Refine to custom table...")
	gui.Form..Visible(True)
	'Delete custom data from for records where last date refine e to Yesterday date (by Date_Hist)
	f.Intrinsic.String.Build("Delete from GCG_5604_Hist where Date_Hist > {0} and Date_Hist <= {1}",v.Local.sLastDateRefine,v.Local.dYesterday.FormatYYYYMMDD,v.Local.sSQL)
	f.ODBC.Connection!conx.Execute(v.Local.sSQL)
	
	'Refine data from initialize date to Yesterday date (by Date_Hist)
	f.Intrinsic.String.Build("Select i1.Part + '-' + i1.Location + '-' + i1.Date_History as Ref,i1.Product_Line,i1.Part,i1.Location,i1.Date_Acct_Yr,i1.Date_Acct_Mo,i1.Date_History,i1.Date_Action as Date_ActionRaw,i1.Inv_Hist_Time,Convert(if(i1.Date_Action = '' or SubString(i1.Date_Action,1,2) > '12','19000101',If( SubString(i1.Date_Action,5,2) < '80','20' + Substring(i1.Date_Action,5,2) + SubString(i1.Date_Action,1,4),'19' + Substring(i1.Date_Action,5,2) + SubString(i1.Date_Action,1,4))),SQL_Integer) as Date_Action,if(i1.Date_Action = '' or SubString(i1.Date_Action,1,2) > '12','19000101' + i1.Inv_Hist_Time,If( SubString(i1.Date_Action,5,2) < '80','20' + Substring(i1.Date_Action,5,2) + SubString(i1.Date_Action,1,4) + i1.Inv_Hist_Time,'19' + Substring(i1.Date_Action,5,2) + SubString(i1.Date_Action,1,4) +  i1.Inv_Hist_Time))  as HistOrderNum1,Convert(0,SQL_Integer) as NextDate,i1.New_Onhand,i1.New_Inv_Cost,i1.New_Matl,i1.New_Labr,i1.New_Ovhd,i1.New_Outs,i1.New_Frgt,i1.New_Oth From Inventory_Hist i1  inner join (Select i2.Part,i2.Location,i2.Date_History,max(if(  i2.Date_Action = '' or SubString(i2.Date_Action,1,2) > '12','19000101' + i2.Inv_Hist_Time ,If( SubString(i2.Date_Action,5,2) < '80','20' + Substring(i2.Date_Action,5,2) + SubString(i2.Date_Action,1,4) + i2.Inv_Hist_Time,'19' + Substring(i2.Date_Action,5,2) + SubString(i2.Date_Action,1,4)+  i2.Inv_Hist_Time)))  as HistOrderNum3 from Inventory_Hist i2 where 	i2.Date_History > '{0}' and i2.Date_History <= '{1}' and SubString(i2.Date_History,1,2) < '80'		Group by     i2.Part,i2.Location,i2.Date_History) i3  on i1.Part = i3.Part and i1.Location = i3.Location and i1.Date_History = i3.Date_history  where i1.Date_History > '{0}' and i1.Date_History <= '{1}' and SubString(i1.Date_History,1,2) < '80' 	and HistOrderNum1 = i3.HistOrderNum3 Order By   i1.Date_History,i1.Location,i1.Part;",v.Local.sLastDateRefine.Right6,v.Local.sYesterday.Right6,v.Local.sSQL)
	
	f.Data.DataTable.CreateFromSQL("Yesterday","conx",v.Local.sSQL,True)
	
	f.Data.DataTable.AddExpressionColumn("Yesterday","Date_Hist","Long","20000000 + Convert([Date_History],System.Int32)")
	f.Data.DataTable.AddColumn("Yesterday","DateRefine","Long",v.Local.sYesterday)
	f.Intrinsic.Control.If(v.DataTable.Yesterday.RowCount,>,0)
		gui.Form..Visible(True)
		gui.Form.proBar1.Max(v.DataTable.Yesterday.RowCount)
		gui.Form.proBar1.Visible(True)
	f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.For(v.Local.iCnt,0,v.DataTable.Yesterday.RowCount--,1)

		'Get the next date for yesterday data
		gui.Form.proBar1.Value(v.Local.iCnt)
		v.Local.sPart.Set(v.DataTable.Yesterday(v.Local.iCnt).Part!FieldValString)
		v.Local.sLocation.Set(v.DataTable.Yesterday(v.Local.iCnt).Location!FieldValString)
		v.Local.iNextDate.Set(0)
		f.Intrinsic.String.Build("Select top 1 Date_History from inventory_hist where part = '{0}' and Location = '{1}' and date_History > '{2}' and substring(date_history,1,2) < '80' and Date_Acct_Yr <> '' and Date_Acct_Mo <> '' order by date_history asc",v.Local.sPart.PSQLFriendly,v.Local.sLocation,v.DataTable.Yesterday(v.Local.iCnt).Date_History!FieldValString,v.Local.sSQL)			
		f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
		f.Intrinsic.Control.If(v.Local.sRet,<>,"")
			f.Intrinsic.Math.Add(20000000,v.local.sRet,v.Local.iNextDate)
			f.Data.DataTable.SetValue("Yesterday",v.Local.iCnt,"NextDate",v.local.iNextDate)
		f.Intrinsic.Control.EndIf	
		
		'Update nextdate for history records having date_Hist < Last Date Refine
		'f.Intrinsic.String.Build("Update GCG_5604_Hist set NextDate = {0} where Part = '{1}' and Location = '{2}' and Date_Hist = (Select Top 1 Date_Hist from GCG_5604_Hist where Part = '{1}' and Location = '{2}' and Date_Hist < {0} Order by Date_Hist desc)",v.DataTable.Yesterday(v.Local.iCnt).Date_Hist!FieldValString,v.Local.sPart.PSQLFriendly,v.Local.sLocation,v.Local.sSQL)
		'Change to Max instead of Order Desc and select top 1 (for bug with Citadel Casing on PSQL 12 does not run with the sql above)
		f.Intrinsic.String.Build("Update GCG_5604_Hist set NextDate = {0} where Part = '{1}' and Location = '{2}' and Date_Hist = (Select IsNull(Max(Date_Hist),0) from GCG_5604_Hist where Part = '{1}' and Location = '{2}' and Date_Hist < {0})",v.DataTable.Yesterday(v.Local.iCnt).Date_Hist!FieldValString,v.Local.sPart.PSQLFriendly,v.Local.sLocation,v.Local.sSQL)
		f.ODBC.Connection!Conx.Execute(v.Local.sSQL)		
	f.Intrinsic.Control.Next(v.Local.iCnt)
	gui.Form..Visible(False)
	
	'Populate old values of the begining of the day record
	f.Intrinsic.String.Build("Select Part + '-' + Location + '-' + Date_History as Ref,   Convert(if(Date_Action = '' or SubString(Date_Action,1,2) > '12','19000101',If( SubString(Date_Action,5,2) < '80','20' + Substring(Date_Action,5,2) + SubString(Date_Action,1,4),'19' + Substring(Date_Action,5,2) + SubString(Date_Action,1,4))),SQL_Integer) as BegDate_Action,Inv_Hist_Time as Beg_Hist_Time,if(Date_Action = '' or SubString(Date_Action,1,2) > '12','19000101' + Inv_Hist_Time,If( SubString(Date_Action,5,2) < '80','20' + Substring(Date_Action,5,2) + SubString(Date_Action,1,4) + Inv_Hist_Time,'19' + Substring(Date_Action,5,2) + SubString(Date_Action,1,4)+  Inv_Hist_Time))  as HistOrderNum1 ,Old_Onhand,Old_Inv_Cost,Old_Matl,Old_Labr,Old_Ovhd,Old_Outs,Old_Frgt,Old_Oth	From Inventory_Hist   where Date_History > '{0}' and Date_History <= '{1}' and SubString(Date_History,1,2) < '80' Order By Part,Location,Date_history,HistOrderNum1 asc;",v.Local.sLastDateRefine.Right6,v.Local.sYesterday.Right6,v.Local.sSQL)
	F.Data.DataTable.CreateFromSQL("OldValue", "conx",v.Local.sSQL, True)
	f.Intrinsic.Control.CallSub("Add_Columns_Using_Dictionaries","SourceTable","OldValue","KeyColumn","Ref","ColumnList","BegDate_Action~Long~0,Beg_Hist_Time~String~,Old_Onhand~Float~0,Old_Inv_Cost~Float~0,Old_Matl~Float~0,Old_Labr~Float~0,Old_Ovhd~Float~0,Old_Outs~Float~0,Old_Frgt~Float~0,Old_Oth~Float~0","TargetTable","Yesterday")
	f.Data.DataTable.Close("OldValue")	
	
	
	f.Data.DataTable.SaveToDB("Yesterday","conx","GCG_5604_Hist","",128,"Product_Line@!@Product_Line*!*Part@!@Part*!*Location@!@Location*!*Date_Acct_Yr@!@Date_Acct_Yr*!*Date_Acct_Mo@!@Date_Acct_Mo*!*Date_History@!@Date_History*!*Date_Hist@!@Date_Hist*!*Inv_Hist_Time@!@Inv_Hist_Time*!*NextDate@!@NextDate*!*New_Onhand@!@New_Onhand*!*New_Inv_Cost@!@New_Inv_Cost*!*New_Matl@!@New_Matl*!*New_Labr@!@New_Labr*!*New_Ovhd@!@New_Ovhd*!*New_Outs@!@New_Outs*!*New_Frgt@!@New_Frgt*!*New_Oth@!@New_Oth*!*DateRefine@!@DateRefine*!*Date_Action@!@Date_Action*!*Old_Onhand@!@Old_Onhand*!*Old_Inv_Cost@!@Old_Inv_Cost*!*Old_Matl@!@Old_Matl*!*Old_Labr@!@Old_Labr*!*Old_Ovhd@!@Old_Ovhd*!*Old_Outs@!@Old_Outs*!*Old_Frgt@!@Old_Frgt*!*Old_Oth@!@Old_Oth*!*BegDate_Action@!@BegDate_Action*!*Beg_Hist_Time@!@Beg_Hist_Time")	
	
	f.Data.DataTable.Close("Yesterday")

	'Process records where Date_Action <> Date_History
	f.Intrinsic.String.Mid(v.Local.sLastDateRefine,5,2,v.Local.shold)
	f.Intrinsic.String.Build("{0}/{1}/{2}",v.Local.sLastDateRefine.left4,v.Local.shold,v.Local.sLastDateRefine.Right2,v.Local.shold)
	v.Local.dLastDateRefine.Set(v.Local.shold)
	f.Intrinsic.Date.DateDiff("D",v.Local.dLastDateRefine,v.Local.dYesterday,v.Local.iDayDiffs)

	f.Intrinsic.Date.DateAdd("D",1,v.Local.dLastDateRefine,v.Local.dDateProcess)
	
	f.Intrinsic.Control.If(v.Local.iDayDiffs,>,0)
		gui.Form..Visible(True)
		gui.Form.proBar1.Max(v.Local.iDayDiffs)	
		gui.Form.proBar1.Visible(True)
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.For(v.Local.iDay,1,v.Local.iDayDiffs,1)
		gui.Form.proBar1.Value(v.Local.iDay)
		v.Local.sDateProcess.Set(v.Local.dDateProcess.FormatYYYYMMDD)
		v.Local.sDateHistorySQL.Set(v.Local.sDateProcess.Right6)
		f.Intrinsic.String.Build("{0}{1}",v.Local.sDateHistorySQL.right4,v.Local.sDateHistorySQL.left2,v.Local.sDateActionSQL)
		'Select data for a day based on Date_action and Date_Action <> Date_History
		f.Intrinsic.String.Build("Select Part,Location,Date_History From Inventory_Hist where Date_Action = '{0}' and Date_History <> '{1}' ",v.Local.sDateActionSQL,v.Local.sDateHistorySQL,v.Local.sSQL)
		f.Data.DataTable.CreateFromSQL("DateProcess","conx",v.Local.sSQL,True)
		f.Data.DataView.Create("DateProcess","dvDateProcess")
		f.Data.DataView.ToDataTableDistinct("DateProcess","dvDateProcess","PartLocDateHist","Part*!*Location*!*Date_History",True)
		f.Intrinsic.Control.For(v.Local.iInner,0,v.DataTable.PartLocDateHist.RowCount--,1)
			v.Local.sPart.Set(v.DataTable.PartLocDateHist(v.Local.iInner).Part!FieldValString)
			v.Local.sLocation.Set(v.DataTable.PartLocDateHist(v.Local.iInner).Location!FieldValString)
			v.Local.sDate_History.Set(v.DataTable.PartLocDateHist(v.Local.iInner).Date_History!FieldValString)
			v.Local.iYearHistory.Set(v.Local.sDate_History.left2)
			'Get the last transaction of the Part, Location at the Date History
			F.Intrinsic.String.Build("Select Top 1 Product_Line,Part,Location,Date_Acct_Yr,Date_Acct_Mo,Date_History,Convert(0,SQL_Integer) as Date_Hist,Inv_Hist_Time,Convert(if(Date_Action = '' or SubString(Date_Action,1,2) > '12','19000101',If( SubString(Date_Action,5,2) < '80','20' + Substring(Date_Action,5,2) + SubString(Date_Action,1,4),'19' + Substring(Date_Action,5,2) + SubString(Date_Action,1,4))),SQL_Integer) as Date_Action1,Convert(0,SQL_Integer) as NextDate,New_Onhand,New_Inv_Cost,New_Matl,New_Labr,New_Ovhd,New_Outs,New_Frgt,New_Oth From Inventory_Hist where Date_History = '{0}' and Part = '{1}' and Location = '{2}' order by Date_Action1 Desc,Inv_Hist_Time Desc",v.DataTable.PartLocDateHist(v.Local.iInner).Date_History!FieldValString,v.Local.sPart.PSQLFriendly,v.Local.sLocation,v.Local.sSQL)
			f.Data.DataTable.CreateFromSQL("aDateHistory","conx",v.Local.sSQL,True)
			f.Intrinsic.Control.If(v.DataTable.aDateHistory.RowCount,>,0)
				'Get the next transaction of this Part,Location from that Date History
				f.Intrinsic.Control.If(v.Local.iYearHistory,>=,80)
					'iYear Prefix = 19000000 (from 1980 to 1999)
					f.Intrinsic.Math.Add("19000000",v.Local.sDate_History,v.Local.iDate_Hist)
					'Find next in range (1980 - 1900)
					f.Intrinsic.String.Build("Select top 1 Date_History from inventory_hist where part = '{0}' and Location = '{1}' and date_History > '{2}' and Date_Acct_Yr <> '' and Date_Acct_Mo <> '' order by date_history asc;",v.Local.sPart.PSQLFriendly,v.Local.sLocation,v.Local.sDate_History,v.Local.sSQL)					
					f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
					f.Intrinsic.Control.If(v.Local.sRet,<>,"")
						f.Intrinsic.Math.Add(19000000,v.local.sRet,v.Local.iNextDate)
						f.Data.DataTable.SetValue("aDateHistory",0,"NextDate",v.local.iNextDate)
					'If there is not in range 1980 - 1900, find next in range >= 2000
					f.Intrinsic.Control.Else
						f.Intrinsic.String.Build("Select top 1 Date_History from inventory_hist where part = '{0}' and Location = '{1}' and date_History >= '000101' and substring(date_history,1,2) < '80' and Date_Acct_Yr <> '' and Date_Acct_Mo <> '' order by date_history asc",v.Local.sPart.PSQLFriendly,v.Local.sLocation,v.Local.sSQL)					
						f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
						f.Intrinsic.Control.If(v.Local.sRet,<>,"")
							f.Intrinsic.Math.Add(20000000,v.local.sRet,v.Local.iNextDate)	
							f.Data.DataTable.SetValue("aDateHistory",0,"NextDate",v.local.iNextDate)
						f.Intrinsic.Control.EndIf							
					f.Intrinsic.Control.EndIf	
				f.Intrinsic.Control.Else
					'iYear Prefix = 2000	
					f.Intrinsic.Math.Add("20000000",v.Local.sDate_History,v.Local.iDate_Hist)
					'Find next
					f.Intrinsic.String.Build("Select top 1 Date_History from inventory_hist where part = '{0}' and Location = '{1}' and date_History > '{2}' and substring(date_history,1,2) < '80' and Date_Acct_Yr <> '' and Date_Acct_Mo <> '' order by date_history asc",v.Local.sPart.PSQLFriendly,v.Local.sLocation,v.Local.sDate_History,v.Local.sSQL)			
					f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
					f.Intrinsic.Control.If(v.Local.sRet,<>,"")
						f.Intrinsic.Math.Add(20000000,v.local.sRet,v.Local.iNextDate)
						f.Data.DataTable.SetValue("aDateHistory",0,"NextDate",v.local.iNextDate)
					f.Intrinsic.Control.EndIf			
				f.Intrinsic.Control.EndIf
				f.Data.DataTable.SetValue("aDateHistory",0,"Date_Hist",v.local.iDate_Hist)
				
				
				'Get Old Values of begining of the day record
				f.Intrinsic.String.Build("Select Top 1 Old_Onhand,Old_Inv_Cost,Old_Matl,Old_Labr,Old_Ovhd,Old_Outs,Old_Frgt,Old_Oth,Inv_Hist_Time,Convert(if(Date_Action = '' or SubString(Date_Action,1,2) > '12','19000101',If( SubString(Date_Action,5,2) < '80','20' + Substring(Date_Action,5,2) + SubString(Date_Action,1,4),'19' + Substring(Date_Action,5,2) + SubString(Date_Action,1,4))),SQL_Integer) as Date_Action1 From Inventory_Hist where Date_History = '{0}' and Part = '{1}' and Location = '{2}' order by Date_Action1 Asc,Inv_Hist_Time Asc",v.DataTable.PartLocDateHist(v.Local.iInner).Date_History!FieldValString,v.Local.sPart.PSQLFriendly,v.Local.sLocation,v.Local.sSQL)
				f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
				f.Intrinsic.Control.If(v.Local.sRet,<>,"")
					f.Intrinsic.String.split(v.Local.sRet,"*!*",v.Local.sRet)
					v.local.fOld_Onhand.Set(v.local.sRet(0)) 
					v.local.fOld_Inv_Cost.Set(v.local.sRet(1)) 
					v.local.fOld_Matl.Set(v.local.sRet(2)) 
					v.local.fOld_Labr.Set(v.local.sRet(3)) 
					v.local.fOld_Ovhd.Set(v.local.sRet(4)) 
					v.local.fOld_Outs.Set(v.local.sRet(5)) 
					v.local.fOld_Frgt.Set(v.local.sRet(6)) 
					v.Local.fOld_Oth.Set(v.local.sRet(7)) 	
					v.Local.sBeg_Hist_Time.Set(v.Local.sRet(8))
					v.Local.iBeg_Date_Action.Set(v.Local.sRet(9))
				f.Intrinsic.Control.Else
					v.local.fOld_Onhand.Set(0) 
					v.local.fOld_Inv_Cost.Set(0) 
					v.local.fOld_Matl.Set(0) 
					v.local.fOld_Labr.Set(0) 
					v.local.fOld_Ovhd.Set(0) 
					v.local.fOld_Outs.Set(0) 
					v.local.fOld_Frgt.Set(0) 
					v.Local.fOld_Oth.Set(0) 	
					v.Local.sBeg_Hist_Time.Set("")
					v.Local.iBeg_Date_Action.Set(0)			
				f.Intrinsic.Control.EndIf						
				
				
				'Find the transaction of that Part,Location,Date_History in the GCG_5604_Hist
				'If there is, update it, If there  is not, insert into GCG_5604_Hist			
				f.Intrinsic.String.Build("Select * from GCG_5604_Hist where Date_Hist = '{0}' and Part = '{1}' and Location = '{2}'",v.Local.iDate_Hist,v.Local.sPart.PSQLFriendly,v.Local.sLocation,v.Local.sSQL)
				f.ODBC.Connection!conx.ExecuteAndReturn(v.Local.sSQL,v.Local.sRet)
				f.Intrinsic.Control.If(v.Local.sRet,=,"")
					f.Intrinsic.String.Build("Insert into GCG_5604_Hist (Product_Line,Part,Location,Date_Acct_Yr,Date_Acct_Mo,Date_History,Date_Hist,Inv_Hist_Time,NextDate,New_Onhand,New_Inv_Cost,New_Matl,New_Labr,New_Ovhd,New_Outs,New_Frgt,New_Oth,DateRefine,Date_Action,Old_Onhand,Old_Inv_Cost,Old_Matl,Old_Labr,Old_Ovhd,Old_Outs,Old_Frgt,Old_Oth,Beg_Hist_Time,BegDate_Action) values  ('{0}','{1}','{2}','{3}','{4}','{5}','{6}','{7}','{8}','{9}','{10}','{11}','{12}','{13}','{14}','{15}','{16}','{17}','{18}','{19}','{20}','{21}','{22}','{23}','{24}','{25}','{26}','{27}','{28}')",v.DataTable.aDateHistory(0).Product_Line!FieldValString,v.Local.sPart.PSQLFriendly,v.DataTable.aDateHistory(0).Location!FieldValString,v.DataTable.aDateHistory(0).Date_Acct_Yr!FieldValString,v.DataTable.aDateHistory(0).Date_Acct_Mo!FieldValString,v.DataTable.aDateHistory(0).Date_History!FieldValString,v.DataTable.aDateHistory(0).Date_Hist!FieldValString,v.DataTable.aDateHistory(0).Inv_Hist_Time!FieldValString,v.DataTable.aDateHistory(0).NextDate!FieldValString,v.DataTable.aDateHistory(0).New_Onhand!FieldValString,v.DataTable.aDateHistory(0).New_Inv_Cost!FieldValString,v.DataTable.aDateHistory(0).New_Matl!FieldValString,v.DataTable.aDateHistory(0).New_Labr!FieldValString,v.DataTable.aDateHistory(0).New_Ovhd!FieldValString,v.DataTable.aDateHistory(0).New_Outs!FieldValString,v.DataTable.aDateHistory(0).New_Frgt!FieldValString,v.DataTable.aDateHistory(0).New_Oth!FieldValString,v.Local.sYesterday,v.DataTable.aDateHistory(0).Date_Action1!FieldValString,v.Local.fOld_Onhand,v.local.fOld_Inv_Cost,v.local.fOld_Matl,v.local.fOld_Labr,v.local.fOld_Ovhd,v.local.fOld_Outs,v.local.fOld_Frgt,v.local.fOld_Oth,v.local.sBeg_Hist_Time,v.Local.iBeg_Date_Action,v.Local.sSQL)
				f.Intrinsic.Control.Else
					f.Intrinsic.String.Build("Update GCG_5604_Hist set Product_Line = '{3}',Date_Acct_Yr = '{4}',Date_Acct_Mo = '{5}',Date_History = '{6}',Inv_Hist_Time = '{7}',NextDate = '{8}',New_Onhand = '{9}',New_Inv_Cost = '{10}',New_Matl = '{11}',New_Labr = '{12}',New_Ovhd = '{13}',New_Outs = '{14}',New_Frgt = '{15}',New_Oth = '{16}',DateRefine = '{17}',Date_Action = '{18}',Old_Onhand = '{19}',Old_Inv_Cost = '{20}',Old_Matl = '{21}',Old_Labr = '{22}',Old_Ovhd = '{23}',Old_Outs = '{24}',Old_Frgt = '{25}',Old_Oth = '{26}',Beg_Hist_Time = '{27}',BegDate_Action = '{28}' where Date_Hist = '{0}' and Part = '{1}' and Location = '{2}'",v.Local.iDate_Hist,v.Local.sPart.PSQLFriendly,v.Local.sLocation,v.DataTable.aDateHistory(0).Product_Line!FieldValString,v.DataTable.aDateHistory(0).Date_Acct_Yr!FieldValString,v.DataTable.aDateHistory(0).Date_Acct_Mo!FieldValString,v.DataTable.aDateHistory(0).Date_History!FieldValString,v.DataTable.aDateHistory(0).Inv_Hist_Time!FieldValString,v.DataTable.aDateHistory(0).NextDate!FieldValString,v.DataTable.aDateHistory(0).New_Onhand!FieldValString,v.DataTable.aDateHistory(0).New_Inv_Cost!FieldValString,v.DataTable.aDateHistory(0).New_Matl!FieldValString,v.DataTable.aDateHistory(0).New_Labr!FieldValString,v.DataTable.aDateHistory(0).New_Ovhd!FieldValString,v.DataTable.aDateHistory(0).New_Outs!FieldValString,v.DataTable.aDateHistory(0).New_Frgt!FieldValString,v.DataTable.aDateHistory(0).New_Oth!FieldValString,v.Local.sYesterday,v.DataTable.aDateHistory(0).Date_Action1!FieldValString,v.Local.fOld_Onhand,v.local.fOld_Inv_Cost,v.local.fOld_Matl,v.local.fOld_Labr,v.local.fOld_Ovhd,v.local.fOld_Outs,v.local.fOld_Frgt,v.local.fOld_Oth,v.local.sBeg_Hist_Time,v.Local.iBeg_Date_Action,v.Local.sSQL)
				f.Intrinsic.Control.EndIf
				f.ODBC.Connection!conx.Execute(v.Local.sSQL)
				
				'Update nextdate for history records having date_Hist < Last Date Refine
				'f.Intrinsic.String.Build("Update GCG_5604_Hist set NextDate = {0} where Part = '{1}' and Location = '{2}' and Date_Hist = (Select Top 1 Date_Hist from GCG_5604_Hist where Part = '{1}' and Location = '{2}' and Date_Hist < {0} Order by Date_Hist desc)",v.Local.iDate_Hist,v.Local.sPart.PSQLFriendly,v.Local.sLocation,v.Local.sSQL)
				''Change to Max instead of Order Desc and select top 1 (for bug with Citadel Casing on PSQL 12 does not run with the sql above)
				f.Intrinsic.String.Build("Update GCG_5604_Hist set NextDate = {0} where Part = '{1}' and Location = '{2}' and Date_Hist = (Select IsNull(Max(Date_Hist),0) from GCG_5604_Hist where Part = '{1}' and Location = '{2}' and Date_Hist < {0} )",v.Local.iDate_Hist,v.Local.sPart.PSQLFriendly,v.Local.sLocation,v.Local.sSQL)
				f.ODBC.Connection!Conx.Execute(v.Local.sSQL)
				
			f.Intrinsic.Control.EndIf
			f.Data.DataTable.Close("aDateHistory")
		f.Intrinsic.Control.Next(v.Local.iInner)
		f.Data.Datatable.Close("PartLocDateHist")
		f.Data.DataTable.Close("DateProcess")
		f.Intrinsic.Date.DateAdd("D",1,v.Local.dDateProcess,v.Local.dDateProcess)
	f.Intrinsic.Control.Next(v.Local.iDay)
	gui.Form..Visible(False)
	
	'Save Yesterday as the Last Date Refine
	F.Global.Registry.AddValue("ONLINE",V.Caller.CompanyCode,"OCTSRS.NET.EXE",5604,3000,False,"Last Date Refine",False,v.Local.dYesterday.FormatYYYYMMDD,-999.0,1/1/1980,12:00:00 AM)
	'f.Intrinsic.UI.CloseWaitDialog	
	gui.Form..Visible(False)
	'Save Transaction Log
	v.Local.sEndTime.Set(v.Ambient.Now)
	f.Intrinsic.String.Build("Run Daily Refine starting at {0} and end at {1}, that refined from (greater than) {2} thru {3}",v.Local.sStartTime,v.Local.sEndTime,v.Local.sLastDateRefine,v.Local.dYesterday.FormatYYYYMMDD,v.Local.sMsg)
	f.Intrinsic.File.String2File(v.Global.sTransactionLog,v.Local.sMsg)

	f.Intrinsic.Control.CallSub("Unload")
	
F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	f.Intrinsic.Control.If(v.Ambient.IsInTaskScheduler,=,False)
		f.Intrinsic.UI.Msgbox(v.Local.sError)
	f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.CallSub("Write_GAB_Error_Log","sError",v.Local.sError)
	f.Intrinsic.Control.CallSub("Unload")
F.Intrinsic.Control.EndTry
Program.Sub.Main.End

Program.Sub.Add_Columns_Using_Dictionaries.Start
'Parameters: SourceTable,KeyColumn,ColumnList(ColumnName~DataType~DefaultValue),TargetTable
f.Intrinsic.Control.Try
	v.Local.sError.Declare
	v.Local.sColumns.Declare
	v.Local.sDataType.Declare
	v.Local.iCnt.Declare
	v.Local.sHold.Declare
	v.Local.sCol.Declare
	v.Local.sDefaultReturn.Declare
	
	f.Intrinsic.String.Split(v.Args.ColumnList,",",v.Local.sColumns)
	f.Intrinsic.Control.For(v.Local.iCnt,0,v.Local.sColumns.UBound,1)
		f.Intrinsic.String.Split(v.Local.sColumns(v.Local.iCnt),"~",v.Local.sHold)
		v.Local.sCol.Set(v.Local.sHold(0).Trim)
		v.Local.sDataType.Set(v.Local.sHold(1).Trim)
		v.Local.sDefaultReturn.set(v.Local.sHold(2).Trim)
		f.Data.Dictionary.CreateFromDataTable(v.Local.sCol,v.Args.SourceTable,v.Args.KeyColumn,v.Local.sCol)
		f.Data.Dictionary.SetDefaultReturn(v.Local.sCol,v.Local.sDefaultReturn)
		f.Data.DataTable.AddColumn(v.Args.TargetTable,v.Local.sCol,v.Local.sDataType,v.Local.sDefaultReturn)
		f.Data.DataTable.FillFromDictionary(v.Args.TargetTable,v.Local.sCol,v.Args.KeyColumn,v.Local.sCol)
		f.Data.Dictionary.Close(v.Local.sCol)	
	f.Intrinsic.Control.Next(v.Local.iCnt)	

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}GAB Version: {5}}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	f.Intrinsic.Control.CallSub("Write_GAB_Error_Log","sError",v.Local.sError)
	f.Intrinsic.Control.CallSub("Unload")
F.Intrinsic.Control.EndTry
Program.Sub.Add_Columns_Using_Dictionaries.End

Program.Sub.Unload.Start
f.Intrinsic.Control.Try
	v.Local.sError.Declare

	F.Intrinsic.Control.If(V.ODBC.conx.Exists)
		F.ODBC.Connection!conx.close
	F.Intrinsic.Control.EndIf
	
	f.Intrinsic.Control.End

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}Subroutine: {2}{1}Subroutine called from:{6}{1}Error Occurred: {3}{1}Description: {4}{1}GAB Version: {5}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,v.Ambient.SubroutineCalledFrom,V.Local.sError)
	f.Intrinsic.Control.If(v.Ambient.IsInTaskScheduler,=,False)
		f.Intrinsic.UI.Msgbox(v.Local.sError)
	f.Intrinsic.Control.EndIf
	f.Intrinsic.Control.CallSub("Write_GAB_Error_Log","sError",v.Local.sError)
	F.Intrinsic.Control.End	
F.Intrinsic.Control.EndTry
Program.Sub.Unload.End

Program.Sub.Check_And_Create_Custom_Folder.Start
f.Intrinsic.Control.Try
	v.Local.sError.Declare
	v.Local.bExist.Declare
	v.Local.sFile.Declare
	v.Local.sDir.Declare
	
	f.Intrinsic.String.Build("{0}\Custom",v.Caller.GlobalDir,v.Local.sDir)
	f.Intrinsic.File.DirExists(v.Local.sDir,v.Local.bExist)
	f.Intrinsic.Control.If(v.Local.bExist.Not)
		f.Intrinsic.File.CreateDir(v.Local.sDir)
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.String.Build("{0}\Custom\5604",v.Caller.GlobalDir,v.Local.sDir)
	f.Intrinsic.File.DirExists(v.Local.sDir,v.Local.bExist)
	f.Intrinsic.Control.If(v.Local.bExist.Not)
		f.Intrinsic.File.CreateDir(v.Local.sDir)
	f.Intrinsic.Control.EndIf
	
	f.Intrinsic.String.Build("{0}\Custom\5604\{1}",v.Caller.GlobalDir,v.Caller.CompanyCode,v.Local.sDir)
	f.Intrinsic.File.DirExists(v.Local.sDir,v.Local.bExist)
	f.Intrinsic.Control.If(v.Local.bExist.Not)
		f.Intrinsic.File.CreateDir(v.Local.sDir)
	f.Intrinsic.Control.EndIf	
	
	f.Intrinsic.String.Build("{0}\Custom\5604\{1}\Transaction Log",v.Caller.GlobalDir,v.Caller.CompanyCode,v.Local.sDir)
	f.Intrinsic.File.DirExists(v.Local.sDir,v.Local.bExist)
	f.Intrinsic.Control.If(v.Local.bExist.Not)
		f.Intrinsic.File.CreateDir(v.Local.sDir)
	f.Intrinsic.Control.EndIf	
	
	f.Intrinsic.String.Build("{0}\Custom\5604\{1}\GAB Error Log",v.Caller.GlobalDir,v.Caller.CompanyCode,v.Local.sDir)
	f.Intrinsic.File.DirExists(v.Local.sDir,v.Local.bExist)
	f.Intrinsic.Control.If(v.Local.bExist.Not)
		f.Intrinsic.File.CreateDir(v.Local.sDir)
	f.Intrinsic.Control.EndIf		
	
F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: 5604 {0}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}GAB Version: {5}}",V.Ambient.ScriptPath,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	f.Intrinsic.Control.CallSub("Write_GAB_Error_Log","sError",v.Local.sError)
	f.Intrinsic.Control.CallSub("Unload")
F.Intrinsic.Control.EndTry	
Program.Sub.Check_And_Create_Custom_Folder.End

Program.Sub.Write_GAB_Error_Log.Start
'Parameters: sError
f.Intrinsic.Control.Try
	v.Local.sError.Declare
	v.Local.sFile.Declare
	v.Local.sContent.Declare
	
	f.Intrinsic.Control.If(v.Ambient.IsInTaskScheduler,=,False)
		f.Intrinsic.UI.Msgbox(v.Args.sError)
	f.Intrinsic.Control.EndIf
	
	'Write error log file
	f.Intrinsic.String.Build("User: {1}{0}Terminal: {2}{0}",v.Ambient.NewLine,v.Caller.User,v.Caller.Terminal,v.Local.sContent)
	f.Intrinsic.String.Build("{0}{1}{2}{3}",v.Local.sContent,v.Ambient.Now,v.Ambient.NewLine,v.Args.sError,v.Local.sContent)
	f.Intrinsic.String.Build("{0}\Custom\5604\{1}\GAB Error Log\{2}_{3}_{4}_{5}.txt",v.Caller.GlobalDir,v.Caller.CompanyCode,v.Caller.User,v.Caller.Terminal,v.Ambient.Date.FormatYYYYMMDD,v.Ambient.Now.FormatHHNNSS,v.Local.sFile)
	f.Intrinsic.File.String2File(v.Local.sFile,v.Local.sContent)
	
f.Intrinsic.Control.Catch
	f.Intrinsic.Control.CallSub("Unload")
f.Intrinsic.Control.EndTry
Program.Sub.Write_GAB_Error_Log.End

Program.Sub.Form_UnLoad.Start
Program.Sub.Form_UnLoad.End
